// Generated by view binder compiler. Do not edit!
package com.willowtreeapps.constraintlayout20test.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.helper.widget.Flow;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.willowtreeapps.constraintlayout20test.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHorizontalFlowBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton fiftyHorizontalBiasButton;

  @NonNull
  public final Flow flowGrid;

  @NonNull
  public final MaterialButton fullHorizontalBiasButton;

  @NonNull
  public final AppCompatTextView horizontalBiasLabel;

  @NonNull
  public final MaterialButtonToggleGroup horizontalBiasToggleGroup;

  @NonNull
  public final AppCompatTextView horizontalGapLabel;

  @NonNull
  public final MaterialButtonToggleGroup horizontalGapToggleGroup;

  @NonNull
  public final AppCompatTextView horizontalStyleLabel;

  @NonNull
  public final MaterialButtonToggleGroup horizontalStyleToggleGroup;

  @NonNull
  public final MaterialButton largeGapButton;

  @NonNull
  public final MaterialButton largeMaxButton;

  @NonNull
  public final AppCompatTextView maxElementsLabel;

  @NonNull
  public final MaterialButtonToggleGroup maxElementsToggleGroup;

  @NonNull
  public final MaterialButton mediumGapButton;

  @NonNull
  public final MaterialButton mediumMaxButton;

  @NonNull
  public final MaterialButton noGapButton;

  @NonNull
  public final MaterialButton noHorizontalBiasButton;

  @NonNull
  public final MaterialButton packedButton;

  @NonNull
  public final MaterialButton smallGapButton;

  @NonNull
  public final MaterialButton smallMaxButton;

  @NonNull
  public final MaterialButton spreadButton;

  @NonNull
  public final MaterialButton spreadInsideButton;

  @NonNull
  public final View view0;

  @NonNull
  public final View view1;

  @NonNull
  public final View view10;

  @NonNull
  public final View view11;

  @NonNull
  public final View view12;

  @NonNull
  public final View view2;

  @NonNull
  public final View view3;

  @NonNull
  public final View view4;

  @NonNull
  public final View view5;

  @NonNull
  public final View view6;

  @NonNull
  public final View view7;

  @NonNull
  public final View view8;

  @NonNull
  public final View view9;

  private FragmentHorizontalFlowBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton fiftyHorizontalBiasButton, @NonNull Flow flowGrid,
      @NonNull MaterialButton fullHorizontalBiasButton,
      @NonNull AppCompatTextView horizontalBiasLabel,
      @NonNull MaterialButtonToggleGroup horizontalBiasToggleGroup,
      @NonNull AppCompatTextView horizontalGapLabel,
      @NonNull MaterialButtonToggleGroup horizontalGapToggleGroup,
      @NonNull AppCompatTextView horizontalStyleLabel,
      @NonNull MaterialButtonToggleGroup horizontalStyleToggleGroup,
      @NonNull MaterialButton largeGapButton, @NonNull MaterialButton largeMaxButton,
      @NonNull AppCompatTextView maxElementsLabel,
      @NonNull MaterialButtonToggleGroup maxElementsToggleGroup,
      @NonNull MaterialButton mediumGapButton, @NonNull MaterialButton mediumMaxButton,
      @NonNull MaterialButton noGapButton, @NonNull MaterialButton noHorizontalBiasButton,
      @NonNull MaterialButton packedButton, @NonNull MaterialButton smallGapButton,
      @NonNull MaterialButton smallMaxButton, @NonNull MaterialButton spreadButton,
      @NonNull MaterialButton spreadInsideButton, @NonNull View view0, @NonNull View view1,
      @NonNull View view10, @NonNull View view11, @NonNull View view12, @NonNull View view2,
      @NonNull View view3, @NonNull View view4, @NonNull View view5, @NonNull View view6,
      @NonNull View view7, @NonNull View view8, @NonNull View view9) {
    this.rootView = rootView;
    this.fiftyHorizontalBiasButton = fiftyHorizontalBiasButton;
    this.flowGrid = flowGrid;
    this.fullHorizontalBiasButton = fullHorizontalBiasButton;
    this.horizontalBiasLabel = horizontalBiasLabel;
    this.horizontalBiasToggleGroup = horizontalBiasToggleGroup;
    this.horizontalGapLabel = horizontalGapLabel;
    this.horizontalGapToggleGroup = horizontalGapToggleGroup;
    this.horizontalStyleLabel = horizontalStyleLabel;
    this.horizontalStyleToggleGroup = horizontalStyleToggleGroup;
    this.largeGapButton = largeGapButton;
    this.largeMaxButton = largeMaxButton;
    this.maxElementsLabel = maxElementsLabel;
    this.maxElementsToggleGroup = maxElementsToggleGroup;
    this.mediumGapButton = mediumGapButton;
    this.mediumMaxButton = mediumMaxButton;
    this.noGapButton = noGapButton;
    this.noHorizontalBiasButton = noHorizontalBiasButton;
    this.packedButton = packedButton;
    this.smallGapButton = smallGapButton;
    this.smallMaxButton = smallMaxButton;
    this.spreadButton = spreadButton;
    this.spreadInsideButton = spreadInsideButton;
    this.view0 = view0;
    this.view1 = view1;
    this.view10 = view10;
    this.view11 = view11;
    this.view12 = view12;
    this.view2 = view2;
    this.view3 = view3;
    this.view4 = view4;
    this.view5 = view5;
    this.view6 = view6;
    this.view7 = view7;
    this.view8 = view8;
    this.view9 = view9;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHorizontalFlowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHorizontalFlowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_horizontal_flow, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHorizontalFlowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      MaterialButton fiftyHorizontalBiasButton = rootView.findViewById(R.id.fifty_horizontal_bias_button);
      if (fiftyHorizontalBiasButton == null) {
        missingId = "fiftyHorizontalBiasButton";
        break missingId;
      }

      Flow flowGrid = rootView.findViewById(R.id.flow_grid);
      if (flowGrid == null) {
        missingId = "flowGrid";
        break missingId;
      }

      MaterialButton fullHorizontalBiasButton = rootView.findViewById(R.id.full_horizontal_bias_button);
      if (fullHorizontalBiasButton == null) {
        missingId = "fullHorizontalBiasButton";
        break missingId;
      }

      AppCompatTextView horizontalBiasLabel = rootView.findViewById(R.id.horizontal_bias_label);
      if (horizontalBiasLabel == null) {
        missingId = "horizontalBiasLabel";
        break missingId;
      }

      MaterialButtonToggleGroup horizontalBiasToggleGroup = rootView.findViewById(R.id.horizontal_bias_toggle_group);
      if (horizontalBiasToggleGroup == null) {
        missingId = "horizontalBiasToggleGroup";
        break missingId;
      }

      AppCompatTextView horizontalGapLabel = rootView.findViewById(R.id.horizontal_gap_label);
      if (horizontalGapLabel == null) {
        missingId = "horizontalGapLabel";
        break missingId;
      }

      MaterialButtonToggleGroup horizontalGapToggleGroup = rootView.findViewById(R.id.horizontal_gap_toggle_group);
      if (horizontalGapToggleGroup == null) {
        missingId = "horizontalGapToggleGroup";
        break missingId;
      }

      AppCompatTextView horizontalStyleLabel = rootView.findViewById(R.id.horizontal_style_label);
      if (horizontalStyleLabel == null) {
        missingId = "horizontalStyleLabel";
        break missingId;
      }

      MaterialButtonToggleGroup horizontalStyleToggleGroup = rootView.findViewById(R.id.horizontal_style_toggle_group);
      if (horizontalStyleToggleGroup == null) {
        missingId = "horizontalStyleToggleGroup";
        break missingId;
      }

      MaterialButton largeGapButton = rootView.findViewById(R.id.large_gap_button);
      if (largeGapButton == null) {
        missingId = "largeGapButton";
        break missingId;
      }

      MaterialButton largeMaxButton = rootView.findViewById(R.id.large_max_button);
      if (largeMaxButton == null) {
        missingId = "largeMaxButton";
        break missingId;
      }

      AppCompatTextView maxElementsLabel = rootView.findViewById(R.id.max_elements_label);
      if (maxElementsLabel == null) {
        missingId = "maxElementsLabel";
        break missingId;
      }

      MaterialButtonToggleGroup maxElementsToggleGroup = rootView.findViewById(R.id.max_elements_toggle_group);
      if (maxElementsToggleGroup == null) {
        missingId = "maxElementsToggleGroup";
        break missingId;
      }

      MaterialButton mediumGapButton = rootView.findViewById(R.id.medium_gap_button);
      if (mediumGapButton == null) {
        missingId = "mediumGapButton";
        break missingId;
      }

      MaterialButton mediumMaxButton = rootView.findViewById(R.id.medium_max_button);
      if (mediumMaxButton == null) {
        missingId = "mediumMaxButton";
        break missingId;
      }

      MaterialButton noGapButton = rootView.findViewById(R.id.no_gap_button);
      if (noGapButton == null) {
        missingId = "noGapButton";
        break missingId;
      }

      MaterialButton noHorizontalBiasButton = rootView.findViewById(R.id.no_horizontal_bias_button);
      if (noHorizontalBiasButton == null) {
        missingId = "noHorizontalBiasButton";
        break missingId;
      }

      MaterialButton packedButton = rootView.findViewById(R.id.packed_button);
      if (packedButton == null) {
        missingId = "packedButton";
        break missingId;
      }

      MaterialButton smallGapButton = rootView.findViewById(R.id.small_gap_button);
      if (smallGapButton == null) {
        missingId = "smallGapButton";
        break missingId;
      }

      MaterialButton smallMaxButton = rootView.findViewById(R.id.small_max_button);
      if (smallMaxButton == null) {
        missingId = "smallMaxButton";
        break missingId;
      }

      MaterialButton spreadButton = rootView.findViewById(R.id.spread_button);
      if (spreadButton == null) {
        missingId = "spreadButton";
        break missingId;
      }

      MaterialButton spreadInsideButton = rootView.findViewById(R.id.spread_inside_button);
      if (spreadInsideButton == null) {
        missingId = "spreadInsideButton";
        break missingId;
      }

      View view0 = rootView.findViewById(R.id.view0);
      if (view0 == null) {
        missingId = "view0";
        break missingId;
      }

      View view1 = rootView.findViewById(R.id.view1);
      if (view1 == null) {
        missingId = "view1";
        break missingId;
      }

      View view10 = rootView.findViewById(R.id.view10);
      if (view10 == null) {
        missingId = "view10";
        break missingId;
      }

      View view11 = rootView.findViewById(R.id.view11);
      if (view11 == null) {
        missingId = "view11";
        break missingId;
      }

      View view12 = rootView.findViewById(R.id.view12);
      if (view12 == null) {
        missingId = "view12";
        break missingId;
      }

      View view2 = rootView.findViewById(R.id.view2);
      if (view2 == null) {
        missingId = "view2";
        break missingId;
      }

      View view3 = rootView.findViewById(R.id.view3);
      if (view3 == null) {
        missingId = "view3";
        break missingId;
      }

      View view4 = rootView.findViewById(R.id.view4);
      if (view4 == null) {
        missingId = "view4";
        break missingId;
      }

      View view5 = rootView.findViewById(R.id.view5);
      if (view5 == null) {
        missingId = "view5";
        break missingId;
      }

      View view6 = rootView.findViewById(R.id.view6);
      if (view6 == null) {
        missingId = "view6";
        break missingId;
      }

      View view7 = rootView.findViewById(R.id.view7);
      if (view7 == null) {
        missingId = "view7";
        break missingId;
      }

      View view8 = rootView.findViewById(R.id.view8);
      if (view8 == null) {
        missingId = "view8";
        break missingId;
      }

      View view9 = rootView.findViewById(R.id.view9);
      if (view9 == null) {
        missingId = "view9";
        break missingId;
      }

      return new FragmentHorizontalFlowBinding((ConstraintLayout) rootView,
          fiftyHorizontalBiasButton, flowGrid, fullHorizontalBiasButton, horizontalBiasLabel,
          horizontalBiasToggleGroup, horizontalGapLabel, horizontalGapToggleGroup,
          horizontalStyleLabel, horizontalStyleToggleGroup, largeGapButton, largeMaxButton,
          maxElementsLabel, maxElementsToggleGroup, mediumGapButton, mediumMaxButton, noGapButton,
          noHorizontalBiasButton, packedButton, smallGapButton, smallMaxButton, spreadButton,
          spreadInsideButton, view0, view1, view10, view11, view12, view2, view3, view4, view5,
          view6, view7, view8, view9);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
